{"version":3,"file":"vue-moment.min.js","sources":["../vue-moment.js"],"sourcesContent":["export default {\n  install(app, options) {\n    const momentInstance = options && options.moment ? options.moment : require('moment');\n\n    app.config.globalProperties.$moment = momentInstance;\n    app.provide('moment', momentInstance);\n\n    app.config.globalProperties.$moment = momentInstance;\n\n    app.directive('moment', {\n      beforeMount(el, binding) {\n        el.innerHTML = momentInstance(binding.value).format('YYYY-MM-DD');\n      },\n      updated(el, binding) {\n        el.innerHTML = momentInstance(binding.value).format('YYYY-MM-DD');\n      }\n    });\n\n    app.config.globalProperties.$filters = {\n      moment(...args) {\n        args = Array.prototype.slice.call(args);\n        const input = args.shift();\n        let date;\n\n        if (Array.isArray(input) && typeof input[0] === 'string') {\n          date = momentInstance(input[0], input[1], true);\n        } else if (typeof input === 'number') {\n          if (input.toString().length < 12) {\n            date = momentInstance.unix(input);\n          } else {\n            date = momentInstance(input);\n          }\n        } else {\n          date = momentInstance(input);\n        }\n\n        if (!input || !date.isValid()) {\n          console.warn('Could not build a valid `moment` object from input.');\n          return input;\n        }\n\n        function parse(...args) {\n          args = Array.prototype.slice.call(args);\n          const method = args.shift();\n\n          switch (method) {\n            case 'add': {\n              const addends = args.shift()\n                .split(',')\n                .map(Function.prototype.call, String.prototype.trim);\n              const obj = {};\n\n              for (let n = 0; n < addends.length; n++) {\n                const addend = addends[n].split(' ');\n                obj[addend[1]] = addend[0];\n              }\n              date.add(obj);\n              break;\n            }\n\n            case 'subtract': {\n              const subtrahends = args.shift()\n                .split(',')\n                .map(Function.prototype.call, String.prototype.trim);\n              const obj = {};\n\n              for (let n = 0; n < subtrahends.length; n++) {\n                const subtrahend = subtrahends[n].split(' ');\n                obj[subtrahend[1]] = subtrahend[0];\n              }\n              date.subtract(obj);\n              break;\n            }\n\n            case 'from': {\n              let from = 'now';\n              let removeSuffix = false;\n\n              if (args[0] === 'now') args.shift();\n              if (momentInstance(args[0]).isValid()) from = momentInstance(args.shift());\n\n              if (args[0] === true) {\n                args.shift();\n                removeSuffix = true;\n              }\n\n              if (from !== 'now') {\n                date = date.from(from, removeSuffix);\n              } else {\n                date = date.fromNow(removeSuffix);\n              }\n              break;\n            }\n\n            case 'diff': {\n              let referenceTime = momentInstance();\n              let units = '';\n              let float = false;\n\n              if (momentInstance(args[0]).isValid()) {\n                referenceTime = momentInstance(args.shift());\n              } else if (args[0] === null || args[0] === 'now') {\n                args.shift();\n              }\n\n              if (args[0]) units = args.shift();\n\n              if (args[0] === true) float = args.shift();\n\n              date = date.diff(referenceTime, units, float);\n              break;\n            }\n\n            case 'calendar': {\n              let referenceTime = momentInstance();\n              let formats = {};\n\n              if (momentInstance(args[0]).isValid()) {\n                referenceTime = momentInstance(args.shift());\n              } else if (args[0] === null || args[0] === 'now') {\n                args.shift();\n              }\n\n              if (typeof args[0] === 'object') formats = args.shift();\n\n              date = date.calendar(referenceTime, formats);\n              break;\n            }\n\n            case 'utc': {\n              date.utc();\n              break;\n            }\n\n            case 'timezone': {\n              date.tz(args.shift());\n              break;\n            }\n\n            default: {\n              const format = method;\n              date = date.format(format);\n            }\n          }\n\n          if (args.length) parse.apply(parse, args);\n        }\n\n        parse.apply(parse, args);\n\n        return date;\n      },\n\n      duration(...args) {\n        args = Array.prototype.slice.call(args);\n        const input = args.shift();\n        const method = args.shift();\n\n        function createDuration(time) {\n          if (!Array.isArray(time)) time = [time];\n          const result = momentInstance.duration(...time);\n          if (!result.isValid()) console.warn('Could not build a valid `duration` object from input.');\n          return result;\n        }\n        let duration = createDuration(input);\n\n        if (method === 'add' || method === 'subtract') {\n          const durationChange = createDuration(args);\n          duration[method](durationChange);\n        } else if (duration && duration[method]) {\n          duration = duration[method](...args);\n        }\n\n        return duration;\n      },\n    };\n  },\n};\n"],"names":["app","options","momentInstance","moment","require","config","globalProperties","$moment","provide","directive","el","binding","innerHTML","value","format","$filters","args","input","Array","prototype","slice","call","shift","date","isArray","toString","length","unix","isValid","warn","parse","method","addends","split","map","Function","String","trim","obj","n","addend","add","subtrahends","subtrahend","subtract","from","removeSuffix","fromNow","referenceTime","units","float","diff","formats","_typeof","calendar","utc","tz","apply","createDuration","time","result","duration","console","durationChange"],"mappings":"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"}